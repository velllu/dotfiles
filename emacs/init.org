#+Title: Emacs Config
#+PROPERTY: header-args :tangle init.el

* Packages
** use-package setup
#+BEGIN_SRC elisp
  (setq package-enable-at-startup nil)
  ;; let's be really sure package.el isn't used
  (setq use-package-ensure-function 'ignore)
  (setq package-archives nil)
#+END_SRC

** Packages
#+BEGIN_SRC elisp
  (use-package catppuccin-theme :hook after-init-hook)
  (use-package counsel)
  (use-package dashboard :ensure t :config (dashboard-setup-startup-hook))
  (use-package doom-themes :hook after-init-hook)
  (use-package eldoc-box :hook prog-mode-hook)
  (use-package esup :defer t)
  (use-package evil :defer 1)
  (use-package ivy-rich)
  (use-package linum-relative :hook prog-mode-hook)
  (use-package markdown-mode :hook markdown-mode-hook)
  (use-package mini-frame)
  (use-package org-bullets :hook org-mode-hook)
  (use-package rust-mode :hook rust-mode-hook)
  (use-package treesit-auto)
  (use-package yaml-mode :defer t)

  (use-package all-the-icons)
  (use-package all-the-icons-ivy-rich)
#+END_SRC

* Theming
** Custom colors variables
#+BEGIN_SRC elisp
  (setq background-color "#11111b")
  (setq foreground-color "#cdd6f4")
#+END_SRC

** Theme
#+BEGIN_SRC elisp
  (load-theme 'catppuccin t)
  (doom-themes-visual-bell-config)
#+END_SRC

** Custom faces
*** Org Mode
They need to be loaded in at ~org-mode-hook~, or otherwise some of them will not work, specifically the ~org-document-title~ one for some reason.  
#+BEGIN_SRC elisp
  (defun org-mode-custom-faces ()
    (set-face-attribute 'org-level-1 nil :height 200)
    (set-face-attribute 'org-level-2 nil :height 180)
    (set-face-attribute 'org-level-3 nil :height 180)
    (set-face-attribute 'org-level-4 nil :height 180)
    (set-face-attribute 'org-level-5 nil :height 180)
    (set-face-attribute 'org-level-6 nil :height 180)
    (set-face-attribute 'org-document-title nil :height 240)
    (set-face-attribute 'org-code nil :family "Monospace")
    (set-face-attribute 'org-hide nil :background background-color :foreground background-color))

  (add-hook 'org-mode-hook #'org-mode-custom-faces)
#+END_SRC

** Font
#+BEGIN_SRC elisp
  (defun set-font (font-name)
    (set-face-attribute 'default nil :font font-name :height 140))

  (set-font "Iosevka Nerd Font")
#+END_SRC

** Transparency
#+BEGIN_SRC elisp
  (add-to-list 'default-frame-alist '(alpha-background . 90))
#+END_SRC

** Custom background color
#+BEGIN_SRC elisp
  (set-background-color background-color)
#+END_SRC

* General
** Smooth scrolling
#+BEGIN_SRC elisp
  (setq pixel-scroll-precision-large-scroll-height 40.0)
  (setq pixel-scroll-precision-interpolation-factor 30)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-follow-mouse 't)
  (setq scroll-step 1)
#+END_SRC

** Remove awful backup files
#+BEGIN_SRC elisp
  (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
       '(("." . "~/.saves/"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups
#+END_SRC

** Remove UI bloat
#+BEGIN_SRC elisp
  (add-hook 'emacs-startup-hook (lambda () (menu-bar-mode -1)))
  (add-hook 'emacs-startup-hook (lambda () (tool-bar-mode -1)))
  (add-hook 'emacs-startup-hook (lambda () (scroll-bar-mode -1)))
  (add-hook 'emacs-startup-hook (lambda () (tooltip-mode -1)))
#+END_SRC

** Dired
*** Remove details
#+BEGIN_SRC elisp
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC

*** Open in the same buffer
#+BEGIN_SRC elisp
  (put 'dired-find-alternate-file 'disabled nil)
  (define-key dired-mode-map (kbd "<mouse-1>") 'dired-find-alternate-file)
  (define-key dired-mode-map (kbd "<ret>") 'dired-find-alternate-file)
#+END_SRC

** Startup modes
#+BEGIN_SRC elisp
  (evil-mode 1)
  (counsel-mode 1)
  (ivy-rich-mode 1)
  (all-the-icons-ivy-rich-mode 1)
  (electric-pair-mode 1)
#+END_SRC

** Minibuffer maximum size
#+BEGIN_SRC elisp
  (setq max-mini-window-height 3)
#+END_SRC

** Dashboard
This is needed to make the dashboard work with the emacs daemon. Otherwise it will just open a ~*scratch*~ buffer
#+BEGIN_SRC elisp
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
#+END_SRC

** Word wrapping
#+BEGIN_SRC elisp
  (add-hook 'conf-mode-hook (lambda ()
    (visual-line-mode 1)))
  (add-hook 'text-mode-hook (lambda ()
    (visual-line-mode 1)))

  (add-hook 'prog-mode-hook (lambda ()
    (toggle-truncate-lines 1)))
#+END_SRC

* Programming
** Line numbering
#+BEGIN_SRC elisp
  (setq linum-relative-backend 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'linum-relative-mode)
#+END_SRC

** LSP
*** Autostart
#+BEGIN_SRC elisp
  (add-hook 'prog-mode-hook 'eglot-ensure)
#+END_SRC

*** Remove inline hints
#+BEGIN_SRC elisp
  (add-hook 'eglot-managed-mode-hook (lambda () (eglot-inlay-hints-mode -1)))
#+END_SRC

** Ruler
#+BEGIN_SRC elisp
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
  (add-hook 'prog-mode-hook (lambda () (setq fill-column 90)))
#+END_SRC

** Formatter
#+BEGIN_SRC elisp
  (defun format-code ()
    (add-hook 'after-save-hook #'eglot-format nil t))

  (add-hook 'prog-mode-hook #'format-code)
#+END_SRC

** Eldoc Box
#+BEGIN_SRC elisp
  (add-hook 'prog-mode-hook 'eldoc-box-hover-mode)
#+END_SRC

** Company
*** Autostart
#+BEGIN_SRC elisp
  (add-hook 'prog-mode-hook 'company-mode)
  (add-hook 'prog-mode-hook 'company-box-mode)
#+END_SRC

*** Maximum size
#+BEGIN_SRC elisp
  (setq company-tooltip-maximum-width 60)
  (setq company-candidates-length 3)
#+END_SRC

** Treesit
#+BEGIN_SRC elisp
    (setq treesit-font-lock-level 4)
    (setq treesit-auto-install 'prompt)
    (global-treesit-auto-mode)
#+END_SRC

* Writing
** Org mode
*** Auto tangle
#+BEGIN_SRC elisp
  (defun tangle ()
    (when (eq major-mode 'org-mode)
      (org-babel-tangle)))

  (add-hook 'after-save-hook 'tangle)
#+END_SRC

*** Fold all by default
#+BEGIN_SRC elisp
  (setq org-startup-folded t)
#+END_SRC

*** Tab folding
#+BEGIN_SRC elisp
  (define-key evil-normal-state-map (kbd "<tab>") 'org-cycle)
#+END_SRC

*** Better headers icons using "org-bullets"
#+BEGIN_SRC elisp
  (setq org-bullets-bullet-list '("●" "◉" "○"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

*** Toggle org emphasis markers function
And also, hide by default  
#+BEGIN_SRC elisp
  (setq org-hide-emphasis-markers t)

  (defun org-emphasis-toggle ()
    (interactive)
    (if org-hide-emphasis-markers
      (progn (setq org-hide-emphasis-markers nil) (message "Made org details show"))
      (progn (setq org-hide-emphasis-markers t) (message "Made org details hidden"))))
#+END_SRC

* Keybinds
** Vim-esque ESC
#+BEGIN_SRC elisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

** General keybinds
#+BEGIN_SRC elisp
  (define-key evil-normal-state-map (kbd "<SPC>.") 'find-file)
  (define-key evil-normal-state-map (kbd "<SPC>oe") #'org-emphasis-toggle)
#+END_SRC
